set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle
call vundle#rc()
" let vundle managle vundle - required!
Bundle 'gmarik/vundle'

" Bundles
" Run :BundleInstall after adding
" Run :BundleUpdate to update
" Run :BundleClean after removing
Bundle 'flazz/vim-colorschemes'
Bundle 'kien/ctrlp.vim'
Bundle 'Valloric/YouCompleteMe'
Bundle 'bling/vim-airline'
Bundle 'godlygeek/tabular'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-eunuch'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-dispatch'
Bundle 'Matt-Stevens/vim-systemd-syntax'
Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'SirVer/ultisnips'
Bundle 'majutsushi/tagbar'
" End of Bundles
" YCM
let g:ycm_confirm_extra_conf = 1
"let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_complete_in_comments = 1
let g:ycm_enable_diagnostic_signs = 0

filetype plugin indent on
syntax on

" vim-latex settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

set rnu	            " Relative numbering
set nu	            " full line number on current line
set smartindent
set wildmenu        " Command line completion
set wildignore+=*.swp,*.bak,*.pyc,Session.vim

set hlsearch        " highlight search results
set incsearch 	    " jump to result during search input
set ignorecase      " case insensitive searching
set smartcase       " unless a capital letter given in search term

set showmatch	      " show matching brackets

set splitbelow	    " open splits (including preview) in lower portion of window

set noerrorbells    " no annoying noise on error

set completeopt="menu"

set expandtab	      " tabs = spaces
set smarttab
set tabstop=2	      " 4 space tabs
set shiftwidth=2
set tw=80 	        " wrap text at 80 chars
set colorcolumn=81	" show where text should wrap

let mapleader = "," " use , as leader character

let g:lasttab = 1
nmap gl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" terminal speed up
set ttyfast
set lazyredraw

" Solarized
set t_Co=16        " enable 256 colors
set t_AB=[48;5;%dm
set t_AF=[38;5;%dm
set bg=dark
colorscheme solarized

" vim-airline config
set laststatus=2    "always show
"let g:airline_left_sep='>'
"let g:airline_right_sep='<'
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_detect_iminsert=0
let g:airline_theme='solarized'
let g:airline_powerline_fonts=1
set guifont="Inconsolata for Powerline"

"Ultisnips config
let g:UltiSnipsSnippetsDir = "~/dotfiles/vim/UltiSnips"
let g:UltiSnipsEditSplit = "horizontal"
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsListSnippets = "<c-i>"
"let g:UltiSnipsSnippetsDirectories = '~/dotfiles/vim/UltiSnips'
"Tabularize shortcut
map <leader>a :Tabularize /

"load project-local vimrc if it exists
if filereadable(".vim.local")
  so .vim.local
endif
au BufRead,BufNewFile .vim.local set filetype=vim

" Folding
set foldnestmax=1

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" vim-latex
let g:LatexBox_Folding=1
"consular
au BufRead,BufNewFile ~/dotfiles/consular/termfiles/* set filetype=ruby

" command to save and exit while creating a session file
command! Bye :mksession! | :wqall

" quickly open a tab to edit important files
" edit ftplugin for current filetype
command! EditFtp exe "tabnew" resolve("$HOME/.vim/ftplugin/" . &ft . ".vim")
" edit main vimrc
command! EditVimrc exe "tabnew" resolve("$MYVIMRC")
" edit local vimrc
command! EditVimrcLocal exe "tabnew" resolve(".vim.local")
" Edit default snippets for filetype
command! EditDefaultSnippets exe "tabnew" resolve("$HOME/.vim/bundle/ultisnips/UltiSnips/" . &ft . ".snippets")
nmap <leader>es :UltiSnipsEdit<CR>
nmap <leader>ev :EditVimrc<CR>
nmap <leader>el :EditVimrcLocal<CR>
nmap <leader>ef :EditFtp<CR>
nmap <leader>eu :EditDefaultSnippets<CR>

" delete trailing whitespace
nmap <leader>dt :%s/\s\+$//g<cr>

au BufRead,BufNewFile */documents/classes/* nmap <leader>s call SendToCise()
function SendToCise()
  execute "!" . "$CLASSES/send-to-cise.sh " . expand("%")
endfunction

" Use old regex engine (avoid syntax highlighting performance issues)
set re=1
