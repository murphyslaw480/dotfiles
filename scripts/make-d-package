#!/bin/ruby

path = ARGV[0]
abort "provide a path!" if path.nil?

# expand ~
path = File.expand_path path
pkgpath = "#{path}/package.d"

# module files
dfiles = Dir.glob("#{path}/*.d").keep_if{|x| File.basename(x) != "package.d"}

# nested package dirs
ddirs = Dir.entries(path).keep_if {|x| Dir.exist?(x) and not %W{. ..}.include? x}

# all modules to import
modules = (dfiles + ddirs).map {|x| File.basename(x, ".d")}

# guess the package name
pkgname = path.split('/').drop_while{|x| x != 'src'}.drop(1).join('.')

# public import declarations
imports = modules
  .map{|x| "public import #{pkgname}.#{x};"}
  .sort_by {|x| x.length}
  .join("\n")

# write to the package.d file
File.open(pkgpath, 'w') do |f|
  f.write("module #{pkgname};\n\n");
  f.write(imports + "\n");
end
